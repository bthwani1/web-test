name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
      - name: Run npm audit
        run: |
          cd backend
          npm audit --audit-level moderate
      - name: Check for secrets
        run: |
          echo "Checking for hardcoded secrets..."
          # Check for common secret patterns
          if grep -r "password.*=" backend/ --include="*.js" --include="*.json"; then
            echo "Potential hardcoded password found"
            exit 1
          fi

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies
        run: |
          cd backend
          npm ci
      - name: Run ESLint
        run: |
          cd backend
          npx eslint . --ext .js --format json --output-file eslint-report.json || true
      - name: Upload ESLint results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: eslint-report
          path: backend/eslint-report.json

  test:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies
        run: |
          cd backend
          npm ci
      - name: Run tests
        run: |
          cd backend
          npm test -- --coverage --watchAll=false
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
      - name: Check test coverage
        run: |
          cd backend
          npm run test:coverage
          # Check if coverage meets threshold
          if [ $(cat coverage/coverage-summary.json | jq '.total.lines.pct') -lt 80 ]; then
            echo "Coverage is below 80%"
            exit 1
          fi

  build:
    runs-on: ubuntu-latest
    needs: [security-scan, lint, test]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies
        run: |
          cd backend
          npm ci
      - name: Build application
        run: |
          cd backend
          npm run build || echo "No build script found"
      - name: Create deployment package
        run: |
          mkdir -p dist
          cp -r backend dist/
          cp -r admin dist/
          cp -r assets dist/
          cp package.json dist/
          cp README.md dist/
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: dist/

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: dist/
      - name: Deploy to Render
        run: |
          echo "Deploying to production..."
          # Add actual deployment commands here
          # For Render, you would typically use their CLI or API
          echo "Deployment completed successfully"
